{"ast":null,"code":"var _jsxFileName = \"/home/n3k0m4/Desktop/CRM_Mock/frontend_web/src/Companies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Link, Route } from 'react-router-dom';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport { Button } from 'react-bootstrap';\nimport Company from \"./Company\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Companies() {\n  _s();\n\n  const hiddenRows = []; // This is to store the clicked element's id so we can hide them\n\n  const [items, setItems] = useState([]); // To fetch the data from the jsons\n\n  const [state, setState] = useState(false); // To check each row's state so we can update the table\n\n  const All_data = []; // Fetch the data from all the companies jsons and storing them on Items\n\n  const fetchItems = async () => {\n    for (let index = 1; index < 88; index++) {\n      const data = await fetch(`http://localhost:3000/api/companies-${index}.json`);\n      const items = await data.json();\n      items.results.forEach(element => {\n        All_data.push(element);\n      });\n      setItems(All_data);\n    }\n  }; // On rendring the page we fetch the items and the row's states\n\n\n  useEffect(() => {\n    fetchItems();\n    setState(false);\n  }, []);\n  /**\n   *   Defining the columns of our table with some styling (We must have a Primary key in our data)\n   *   Using the rankformatter to put our buttons on the last column\n   */\n\n  const columns = [{\n    dataField: \"id\",\n    text: \"id\",\n    headerAttrs: {\n      width: 250\n    },\n    attrs: {\n      width: 250,\n      className: \"EditRow\"\n    }\n  }, {\n    dataField: \"name\",\n    text: \"Company name\"\n  }, {\n    dataField: \"edit\",\n    text: \"Edit\",\n    sort: false,\n    formatter: rankFormatter,\n    headerAttrs: {\n      width: 250\n    },\n    attrs: {\n      width: 250,\n      className: \"EditRow\"\n    }\n  }];\n  /**\n   * Making the rows selectable \n   * Defining the event onSelect to apply when the user selects one row\n   * Defining the onSelectAll event to help selecting a whole page at the time\n   * Check the console log to see how it works\n   */\n\n  const selectRow = {\n    // You can change the mode from radio to checkbox to hide multiple rows at the same time\n    mode: 'checkbox',\n    onSelect: (row, isSelect, rowIndex, e) => {\n      //console.log(isSelect);\n      const selected_row_id = rowIndex + 1;\n\n      if (isSelect && hiddenRows.indexOf(selected_row_id.toString()) < 0) {\n        hiddenRows.push(selected_row_id.toString());\n      }\n\n      if (!isSelect && hiddenRows.indexOf(selected_row_id.toString()) > -1) {\n        hiddenRows.splice(hiddenRows.indexOf(selected_row_id.toString()), 1);\n      }\n\n      console.log(hiddenRows);\n      setState(true);\n    },\n\n    /**\n    * Just to Handle the button that selects everything at the time (Side case)\n    */\n    onSelectAll: (isSelect, rows, e) => {\n      if (isSelect) {\n        rows.map(element => {\n          if (hiddenRows.indexOf(element.id) < 0) {\n            hiddenRows.push(element.id);\n          }\n        });\n      } else {\n        hiddenRows.splice(0, hiddenRows.length);\n      }\n\n      console.log(hiddenRows);\n    }\n  };\n  return (\n    /*#__PURE__*/\n\n    /**\n     * Routing the Links created rankFormatter to the company component.\n     * Creating the table with \"id\" as Primary key and \"items\" as data.\n     * The pagination is completely handeled by paginationFactory.\n     * hiddenRows is used to Hide rows in the Array given.\n     * selectRow is doing an important job at dealing with selecting events\n     */\n    _jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/companies/:id\",\n          component: Company\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"All companies' data:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n            keyField: \"id\",\n            data: items,\n            columns: columns,\n            hiddenRows: hiddenRows,\n            pagination: paginationFactory(),\n            selectRow: selectRow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  );\n}\n/**\n * Creating the buttons to Hide and Info\n * Each element of our data represented in the table is dynamically linked to \"/companies/:id\"\n */\n\n\n_s(Companies, \"LOfW2H0Um78iU8k4XyNvd61BR+w=\");\n\n_c = Companies;\n\nfunction rankFormatter(cell, row, rowIndex, formatExtraData) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"pointer\",\n      lineHeight: \"normal\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/companies/${rowIndex + 1}`,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          textAlign: \"center\",\n          cursor: \"pointer\",\n          lineHeight: \"normal\"\n        },\n        color: \"primary\",\n        children: \"Info\"\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        textAlign: \"center\",\n        cursor: \"pointer\",\n        lineHeight: \"normal\"\n      },\n      color: \"primary\",\n      children: \"Hide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n;\nexport default Companies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Companies\");","map":{"version":3,"sources":["/home/n3k0m4/Desktop/CRM_Mock/frontend_web/src/Companies.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Link","Route","BootstrapTable","paginationFactory","Button","Company","Companies","hiddenRows","items","setItems","state","setState","All_data","fetchItems","index","data","fetch","json","results","forEach","element","push","columns","dataField","text","headerAttrs","width","attrs","className","sort","formatter","rankFormatter","selectRow","mode","onSelect","row","isSelect","rowIndex","e","selected_row_id","indexOf","toString","splice","console","log","onSelectAll","rows","map","id","length","cell","formatExtraData","textAlign","cursor","lineHeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Link, Route } from 'react-router-dom';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport { Button } from 'react-bootstrap';\nimport Company from \"./Company\";\n\n\n\nfunction Companies() {\n\n    const hiddenRows = []; // This is to store the clicked element's id so we can hide them\n    const [items, setItems] = useState([]); // To fetch the data from the jsons\n    const [state, setState] = useState(false); // To check each row's state so we can update the table\n    const All_data = [];\n\n    // Fetch the data from all the companies jsons and storing them on Items\n    const fetchItems = async () => {\n        for (let index = 1; index < 88; index++) {\n            const data = await fetch(`http://localhost:3000/api/companies-${index}.json`);\n            const items = await data.json();\n            items.results.forEach(element => {\n                All_data.push(element);\n            });\n            setItems(All_data);\n        }\n    };\n\n    // On rendring the page we fetch the items and the row's states\n    useEffect(() => {\n        fetchItems();\n        setState(false);\n    }, []);\n\n    /**\n     *   Defining the columns of our table with some styling (We must have a Primary key in our data)\n     *   Using the rankformatter to put our buttons on the last column\n     */\n    const columns = [\n        {\n            dataField: \"id\",\n            text: \"id\",\n            headerAttrs: { width: 250 },\n            attrs: { width: 250, className: \"EditRow\" }\n        },\n        {\n            dataField: \"name\",\n            text: \"Company name\",\n        },\n        {\n            dataField: \"edit\",\n            text: \"Edit\",\n            sort: false,\n            formatter: rankFormatter,\n            headerAttrs: { width: 250 },\n            attrs: { width: 250, className: \"EditRow\" }\n        }\n    ];\n    /**\n     * Making the rows selectable \n     * Defining the event onSelect to apply when the user selects one row\n     * Defining the onSelectAll event to help selecting a whole page at the time\n     * Check the console log to see how it works\n     */\n    const selectRow = {\n        // You can change the mode from radio to checkbox to hide multiple rows at the same time\n        mode: 'checkbox',\n        onSelect: (row, isSelect, rowIndex, e) => {\n            //console.log(isSelect);\n            const selected_row_id = rowIndex + 1;\n\n            if (isSelect && hiddenRows.indexOf(selected_row_id.toString()) < 0) {\n                hiddenRows.push(selected_row_id.toString());\n            }\n            if (!(isSelect) && hiddenRows.indexOf(selected_row_id.toString()) > -1) {\n                hiddenRows.splice(hiddenRows.indexOf(selected_row_id.toString()), 1);\n            }\n            console.log(hiddenRows);\n            setState(true);\n        },\n        /**\n        * Just to Handle the button that selects everything at the time (Side case)\n        */\n        onSelectAll: (isSelect, rows, e) => {\n            if (isSelect) {\n                rows.map(element => {\n                    if ((hiddenRows.indexOf(element.id) < 0)) {\n                        hiddenRows.push(element.id);\n                    }\n                })\n            }\n            else { hiddenRows.splice(0, hiddenRows.length); }\n            console.log(hiddenRows);\n        }\n\n    };\n\n    return (\n        /**\n         * Routing the Links created rankFormatter to the company component.\n         * Creating the table with \"id\" as Primary key and \"items\" as data.\n         * The pagination is completely handeled by paginationFactory.\n         * hiddenRows is used to Hide rows in the Array given.\n         * selectRow is doing an important job at dealing with selecting events\n         */\n        <Router>\n            <Switch>\n                <Route path='/companies/:id' component={Company} />\n                <div>\n                    <h4>All companies' data:</h4>\n                    <h1>{state}</h1>\n                    <BootstrapTable\n                        keyField=\"id\"\n                        data={items}\n                        columns={columns}\n                        hiddenRows={hiddenRows}\n                        pagination={paginationFactory()}\n                        selectRow={selectRow}\n                    />\n                </div>\n            </Switch>\n        </Router>\n    )\n}\n/**\n * Creating the buttons to Hide and Info\n * Each element of our data represented in the table is dynamically linked to \"/companies/:id\"\n */\nfunction rankFormatter(cell, row, rowIndex, formatExtraData) {\n    return (\n\n        <div style={{\n            textAlign: \"center\",\n            cursor: \"pointer\",\n            lineHeight: \"normal\"\n        }}>\n            <Link to={`/companies/${rowIndex + 1}`}>\n                <Button key={rowIndex} style={{\n                    textAlign: \"center\",\n                    cursor: \"pointer\",\n                    lineHeight: \"normal\"\n                }} color=\"primary\">Info</Button>{}\n            </Link>\n\n            <Button style={{\n                textAlign: \"center\",\n                cursor: \"pointer\",\n                lineHeight: \"normal\"\n            }} color=\"primary\">Hide</Button>{}\n        </div >\n    );\n};\n\n\n\nexport default Companies;"]},"metadata":{},"sourceType":"module"}